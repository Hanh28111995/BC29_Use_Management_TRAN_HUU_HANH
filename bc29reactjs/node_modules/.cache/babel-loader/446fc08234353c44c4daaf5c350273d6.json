{"ast":null,"code":"import { ADD_USER, UPDATE_USER } from '../types/user';\nconst DEFAULT_STATE = {\n  userList: [{\n    id: 1,\n    username: 'man.nguyen',\n    fullName: 'Man Ng',\n    email: 'man.nguyen@gmail.com',\n    password: '123',\n    phoneNumber: '085512123123',\n    type: 'Client'\n  }, {\n    id: 2,\n    username: 'khai.tran',\n    fullName: 'Khai Tran',\n    password: '123',\n    email: 'khai.tran@gmail.com',\n    phoneNumber: '085512123123',\n    type: 'Admin'\n  }],\n  selectedUser: null\n}; // trong reducer nếu mà cái giá trị bên trong state là 1 mảng hoặc\n// object thì cần phải copy ra 1 cải mảng hoặc object mới\n\nexport const userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_STATE;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case ADD_USER:\n      {\n        const data = [...state.userList];\n        data.push({ ...payload,\n          id: Date.now()\n        });\n        state.userList = data;\n        return { ...state\n        };\n      }\n\n    case UPDATE_USER:\n      {\n        // const data = [...state.userList];\n        // const idx = data.findIndex((ele) => ele.id === payload.id);\n        // if (idx !== -1) {\n        //   data[idx] = payload;\n        // }\n        // state.userList = data;\n        state.userList = state.userList.map(ele => ele.id === payload.id ? payload : ele);\n        state.selectedUser = null;\n        return { ...state\n        };\n      }\n\n    case 'SET_SELECTED_USER':\n      {\n        // state.selectedUser = payload;\n        return { ...state,\n          selectedUser: payload\n        };\n      }\n\n    case 'DELETE_USER':\n      {\n        // const data = [...state.userList];\n        // const idx = data.findIndex((ele) => ele.id === payload);\n        // if (idx !== -1) {\n        //   data.splice(idx, 1);\n        // }\n        // state.userList = data;\n        state.userList = state.userList.filter(ele => ele.id !== payload);\n        return { ...state\n        };\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["ADD_USER","UPDATE_USER","DEFAULT_STATE","userList","id","username","fullName","email","password","phoneNumber","type","selectedUser","userReducer","state","payload","data","push","Date","now","map","ele","filter"],"sources":["C:/Users/Hanh/OneDrive/Tài liệu/GITHUB/BC29_Use_Management_TRAN_HUU_HANH/bc29reactjs/src/Store/reducers/userReducer.js"],"sourcesContent":["import { ADD_USER, UPDATE_USER } from '../types/user';\n\nconst DEFAULT_STATE = {\n  userList: [\n    {\n      id: 1,\n      username: 'man.nguyen',\n      fullName: 'Man Ng',\n      email: 'man.nguyen@gmail.com',\n      password: '123',\n      phoneNumber: '085512123123',\n      type: 'Client',\n    },\n    {\n      id: 2,\n      username: 'khai.tran',\n      fullName: 'Khai Tran',\n      password: '123',\n      email: 'khai.tran@gmail.com',\n      phoneNumber: '085512123123',\n      type: 'Admin',\n    },\n  ],\n  selectedUser: null,\n};\n\n// trong reducer nếu mà cái giá trị bên trong state là 1 mảng hoặc\n// object thì cần phải copy ra 1 cải mảng hoặc object mới\nexport const userReducer = (state = DEFAULT_STATE, { type, payload }) => {\n  switch (type) {\n    case ADD_USER: {\n      const data = [...state.userList];\n\n      data.push({ ...payload, id: Date.now() });\n\n      state.userList = data;\n\n      return { ...state };\n    }\n\n    case UPDATE_USER: {\n      // const data = [...state.userList];\n\n      // const idx = data.findIndex((ele) => ele.id === payload.id);\n\n      // if (idx !== -1) {\n      //   data[idx] = payload;\n      // }\n\n      // state.userList = data;\n      state.userList = state.userList.map((ele) =>\n        ele.id === payload.id ? payload : ele\n      );\n      state.selectedUser = null;\n\n      return { ...state };\n    }\n\n    case 'SET_SELECTED_USER': {\n      // state.selectedUser = payload;\n\n      return { ...state, selectedUser: payload };\n    }\n\n    case 'DELETE_USER': {\n      // const data = [...state.userList];\n\n      // const idx = data.findIndex((ele) => ele.id === payload);\n\n      // if (idx !== -1) {\n      //   data.splice(idx, 1);\n      // }\n\n      // state.userList = data;\n      state.userList = state.userList.filter((ele) => ele.id !== payload);\n\n      return { ...state };\n    }\n\n    default:\n      return state;\n  }\n};\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,eAAtC;AAEA,MAAMC,aAAa,GAAG;EACpBC,QAAQ,EAAE,CACR;IACEC,EAAE,EAAE,CADN;IAEEC,QAAQ,EAAE,YAFZ;IAGEC,QAAQ,EAAE,QAHZ;IAIEC,KAAK,EAAE,sBAJT;IAKEC,QAAQ,EAAE,KALZ;IAMEC,WAAW,EAAE,cANf;IAOEC,IAAI,EAAE;EAPR,CADQ,EAUR;IACEN,EAAE,EAAE,CADN;IAEEC,QAAQ,EAAE,WAFZ;IAGEC,QAAQ,EAAE,WAHZ;IAIEE,QAAQ,EAAE,KAJZ;IAKED,KAAK,EAAE,qBALT;IAMEE,WAAW,EAAE,cANf;IAOEC,IAAI,EAAE;EAPR,CAVQ,CADU;EAqBpBC,YAAY,EAAE;AArBM,CAAtB,C,CAwBA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,YAA8C;EAAA,IAA7CC,KAA6C,uEAArCX,aAAqC;EAAA,IAAtB;IAAEQ,IAAF;IAAQI;EAAR,CAAsB;;EACvE,QAAQJ,IAAR;IACE,KAAKV,QAAL;MAAe;QACb,MAAMe,IAAI,GAAG,CAAC,GAAGF,KAAK,CAACV,QAAV,CAAb;QAEAY,IAAI,CAACC,IAAL,CAAU,EAAE,GAAGF,OAAL;UAAcV,EAAE,EAAEa,IAAI,CAACC,GAAL;QAAlB,CAAV;QAEAL,KAAK,CAACV,QAAN,GAAiBY,IAAjB;QAEA,OAAO,EAAE,GAAGF;QAAL,CAAP;MACD;;IAED,KAAKZ,WAAL;MAAkB;QAChB;QAEA;QAEA;QACA;QACA;QAEA;QACAY,KAAK,CAACV,QAAN,GAAiBU,KAAK,CAACV,QAAN,CAAegB,GAAf,CAAoBC,GAAD,IAClCA,GAAG,CAAChB,EAAJ,KAAWU,OAAO,CAACV,EAAnB,GAAwBU,OAAxB,GAAkCM,GADnB,CAAjB;QAGAP,KAAK,CAACF,YAAN,GAAqB,IAArB;QAEA,OAAO,EAAE,GAAGE;QAAL,CAAP;MACD;;IAED,KAAK,mBAAL;MAA0B;QACxB;QAEA,OAAO,EAAE,GAAGA,KAAL;UAAYF,YAAY,EAAEG;QAA1B,CAAP;MACD;;IAED,KAAK,aAAL;MAAoB;QAClB;QAEA;QAEA;QACA;QACA;QAEA;QACAD,KAAK,CAACV,QAAN,GAAiBU,KAAK,CAACV,QAAN,CAAekB,MAAf,CAAuBD,GAAD,IAASA,GAAG,CAAChB,EAAJ,KAAWU,OAA1C,CAAjB;QAEA,OAAO,EAAE,GAAGD;QAAL,CAAP;MACD;;IAED;MACE,OAAOA,KAAP;EAnDJ;AAqDD,CAtDM"},"metadata":{},"sourceType":"module"}